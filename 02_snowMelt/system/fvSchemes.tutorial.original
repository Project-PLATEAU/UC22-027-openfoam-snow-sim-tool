/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1906                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default     Euler;
}

gradSchemes
{
    default     Gauss linear;
}

divSchemes
{
/*
    default         none;
    div(phi,U)       Gauss upwind 0.2;
    div(phi,K)       Gauss limitedLinear 0.2;
    div(phi,h)       Gauss limitedLinear 0.2;
    div(phi,k)      bounded Gauss limitedLinear 0.2;
    div(phi,epsilon) bounded Gauss limitedLinear 0.2;
    div(phi,omega) bounded Gauss limitedLinear 0.2;
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
*/
/*
    default         none;
    div(phi,U)      bounded Gauss limitedLinear 0.2;
    div(phi,h)      bounded Gauss limitedLinear 0.2;
    div(phi,e)      bounded Gauss limitedLinear 0.2;
    div(phi,k)      bounded Gauss limitedLinear 0.2;
    div(phi,epsilon) bounded Gauss limitedLinear 0.2;
    div(phi,R)      bounded Gauss limitedLinear 0.2;
    div(phi,K)     bounded Gauss limitedLinear 0.2;
    div(phi,Ekp)    bounded Gauss limitedLinear 0.2;
    div(R)          bounded Gauss limitedLinear 0.2;
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
        div(phi,omega) bounded Gauss limitedLinear 0.2;
*/
    default         none;
    div(phi,U)      Gauss upwind 0.2;
    div(phi,h)      Gauss upwind 0.2;
    div(phi,e)      Gauss upwind 0.2;
    div(phi,k)      Gauss upwind 0.2;
    div(phi,epsilon) Gauss upwind 0.2;
    div(phi,R)      Gauss upwind 0.2;
    div(phi,K)     Gauss upwind 0.2;
    div(phi,Ekp)    Gauss upwind 0.2;
    div(R)          Gauss upwind 0.2;
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
    div(phi,omega)Gauss upwind 0.2;
    div(Ji,Ii_h)        Gauss linearUpwind grad(U);


}

laplacianSchemes
{
    default         Gauss linear corrected;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         corrected;
}


// ************************************************************************* //
